/*! SmartAdmin - v1.5 - 2014-10-16 */
function runAllCharts() {
    if ($.fn.sparkline) {
        var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, ab, bb, cb, db, eb, fb, gb, hb, ib, jb, kb, lb, mb, nb, ob, pb, qb, rb, sb;
        $(".sparkline:not(:has(>canvas))").each(function () {
            var tb = $(this), ub = tb.data("sparkline-type") || "bar";
            if ("bar" == ub && (a = tb.data("sparkline-bar-color") || tb.css("color") || "#0000f0", b = tb.data("sparkline-height") || "26px", c = tb.data("sparkline-barwidth") || 5, d = tb.data("sparkline-barspacing") || 2, e = tb.data("sparkline-negbar-color") || "#A90329", f = tb.data("sparkline-barstacked-color") || ["#A90329", "#0099c6", "#98AA56", "#da532c", "#4490B1", "#6E9461", "#990099", "#B4CAD3"], tb.sparkline("html", {
                        "barColor": a,
                        "type": ub,
                        "height": b,
                        "barWidth": c,
                        "barSpacing": d,
                        "stackedBarColor": f,
                        "negBarColor": e,
                        "zeroAxis": "false"
                    }), tb = null), "line" == ub && (b = tb.data("sparkline-height") || "20px", ab = tb.data("sparkline-width") || "90px", g = tb.data("sparkline-line-color") || tb.css("color") || "#0000f0", h = tb.data("sparkline-line-width") || 1, i = tb.data("fill-color") || "#c0d0f0", j = tb.data("sparkline-spot-color") || "#f08000", k = tb.data("sparkline-minspot-color") || "#ed1c24", l = tb.data("sparkline-maxspot-color") || "#f08000", m = tb.data("sparkline-highlightspot-color") || "#50f050", n = tb.data("sparkline-highlightline-color") || "f02020", o = tb.data("sparkline-spotradius") || 1.5, thisChartMinYRange = tb.data("sparkline-min-y") || "undefined", thisChartMaxYRange = tb.data("sparkline-max-y") || "undefined", thisChartMinXRange = tb.data("sparkline-min-x") || "undefined", thisChartMaxXRange = tb.data("sparkline-max-x") || "undefined", thisMinNormValue = tb.data("min-val") || "undefined", thisMaxNormValue = tb.data("max-val") || "undefined", thisNormColor = tb.data("norm-color") || "#c0c0c0", thisDrawNormalOnTop = tb.data("draw-normal") || !1, tb.sparkline("html", {
                        "type": "line",
                        "width": ab,
                        "height": b,
                        "lineWidth": h,
                        "lineColor": g,
                        "fillColor": i,
                        "spotColor": j,
                        "minSpotColor": k,
                        "maxSpotColor": l,
                        "highlightSpotColor": m,
                        "highlightLineColor": n,
                        "spotRadius": o,
                        "chartRangeMin": thisChartMinYRange,
                        "chartRangeMax": thisChartMaxYRange,
                        "chartRangeMinX": thisChartMinXRange,
                        "chartRangeMaxX": thisChartMaxXRange,
                        "normalRangeMin": thisMinNormValue,
                        "normalRangeMax": thisMaxNormValue,
                        "normalRangeColor": thisNormColor,
                        "drawNormalOnTop": thisDrawNormalOnTop
                    }), tb = null), "pie" == ub && (p = tb.data("sparkline-piecolor") || ["#B4CAD3", "#4490B1", "#98AA56", "#da532c", "#6E9461", "#0099c6", "#990099", "#717D8A"], q = tb.data("sparkline-piesize") || 90, r = tb.data("border-color") || "#45494C", s = tb.data("sparkline-offset") || 0, tb.sparkline("html", {
                        "type": "pie",
                        "width": q,
                        "height": q,
                        "tooltipFormat": '<span style="color: {{color}}">&#9679;</span> ({{percent.1}}%)',
                        "sliceColors": p,
                        "borderWidth": 1,
                        "offset": s,
                        "borderColor": r
                    }), tb = null), "box" == ub && (t = tb.data("sparkline-width") || "auto", u = tb.data("sparkline-height") || "auto", v = tb.data("sparkline-boxraw") || !1, w = tb.data("sparkline-targetval") || "undefined", x = tb.data("sparkline-min") || "undefined", y = tb.data("sparkline-max") || "undefined", z = tb.data("sparkline-showoutlier") || !0, A = tb.data("sparkline-outlier-iqr") || 1.5, B = tb.data("sparkline-spotradius") || 1.5, C = tb.css("color") || "#000000", D = tb.data("fill-color") || "#c0d0f0", E = tb.data("sparkline-whis-color") || "#000000", F = tb.data("sparkline-outline-color") || "#303030", G = tb.data("sparkline-outlinefill-color") || "#f0f0f0", H = tb.data("sparkline-outlinemedian-color") || "#f00000", I = tb.data("sparkline-outlinetarget-color") || "#40a020", tb.sparkline("html", {
                        "type": "box",
                        "width": t,
                        "height": u,
                        "raw": v,
                        "target": w,
                        "minValue": x,
                        "maxValue": y,
                        "showOutliers": z,
                        "outlierIQR": A,
                        "spotRadius": B,
                        "boxLineColor": C,
                        "boxFillColor": D,
                        "whiskerColor": E,
                        "outlierLineColor": F,
                        "outlierFillColor": G,
                        "medianColor": H,
                        "targetColor": I
                    }), tb = null), "bullet" == ub) {
                var vb = tb.data("sparkline-height") || "auto";
                J = tb.data("sparkline-width") || 2, K = tb.data("sparkline-bullet-color") || "#ed1c24", L = tb.data("sparkline-performance-color") || "#3030f0", M = tb.data("sparkline-bulletrange-color") || ["#d3dafe", "#a8b6ff", "#7f94ff"], tb.sparkline("html", {
                    "type": "bullet",
                    "height": vb,
                    "targetWidth": J,
                    "targetColor": K,
                    "performanceColor": L,
                    "rangeColors": M
                }), tb = null
            }
            "discrete" == ub && (N = tb.data("sparkline-height") || 26, O = tb.data("sparkline-width") || 50, P = tb.css("color"), Q = tb.data("sparkline-line-height") || 5, R = tb.data("sparkline-threshold") || "undefined", S = tb.data("sparkline-threshold-color") || "#ed1c24", tb.sparkline("html", {
                "type": "discrete",
                "width": O,
                "height": N,
                "lineColor": P,
                "lineHeight": Q,
                "thresholdValue": R,
                "thresholdColor": S
            }), tb = null), "tristate" == ub && (T = tb.data("sparkline-height") || 26, U = tb.data("sparkline-posbar-color") || "#60f060", V = tb.data("sparkline-negbar-color") || "#f04040", W = tb.data("sparkline-zerobar-color") || "#909090", X = tb.data("sparkline-barwidth") || 5, Y = tb.data("sparkline-barspacing") || 2, Z = tb.data("sparkline-zeroaxis") || !1, tb.sparkline("html", {
                "type": "tristate",
                "height": T,
                "posBarColor": _,
                "negBarColor": V,
                "zeroBarColor": W,
                "barWidth": X,
                "barSpacing": Y,
                "zeroAxis": Z
            }), tb = null), "compositebar" == ub && (b = tb.data("sparkline-height") || "20px", ab = tb.data("sparkline-width") || "100%", c = tb.data("sparkline-barwidth") || 3, h = tb.data("sparkline-line-width") || 1, g = tb.data("data-sparkline-linecolor") || "#ed1c24", _ = tb.data("data-sparkline-barcolor") || "#333333", tb.sparkline(tb.data("sparkline-bar-val"), {
                "type": "bar",
                "width": ab,
                "height": b,
                "barColor": _,
                "barWidth": c
            }), tb.sparkline(tb.data("sparkline-line-val"), {
                "width": ab,
                "height": b,
                "lineColor": g,
                "lineWidth": h,
                "composite": !0,
                "fillColor": !1
            }), tb = null), "compositeline" == ub && (b = tb.data("sparkline-height") || "20px", ab = tb.data("sparkline-width") || "90px", bb = tb.data("sparkline-bar-val"), cb = tb.data("sparkline-bar-val-spots-top") || null, db = tb.data("sparkline-bar-val-spots-bottom") || null, eb = tb.data("sparkline-line-width-top") || 1, fb = tb.data("sparkline-line-width-bottom") || 1, gb = tb.data("sparkline-color-top") || "#333333", hb = tb.data("sparkline-color-bottom") || "#ed1c24", ib = tb.data("sparkline-spotradius-top") || 1.5, jb = tb.data("sparkline-spotradius-bottom") || ib, j = tb.data("sparkline-spot-color") || "#f08000", kb = tb.data("sparkline-minspot-color-top") || "#ed1c24", lb = tb.data("sparkline-maxspot-color-top") || "#f08000", mb = tb.data("sparkline-minspot-color-bottom") || kb, nb = tb.data("sparkline-maxspot-color-bottom") || lb, ob = tb.data("sparkline-highlightspot-color-top") || "#50f050", pb = tb.data("sparkline-highlightline-color-top") || "#f02020", qb = tb.data("sparkline-highlightspot-color-bottom") || ob, thisHighlightLineColor2 = tb.data("sparkline-highlightline-color-bottom") || pb, rb = tb.data("sparkline-fillcolor-top") || "transparent", sb = tb.data("sparkline-fillcolor-bottom") || "transparent", tb.sparkline(bb, {
                "type": "line",
                "spotRadius": ib,
                "spotColor": j,
                "minSpotColor": kb,
                "maxSpotColor": lb,
                "highlightSpotColor": ob,
                "highlightLineColor": pb,
                "valueSpots": cb,
                "lineWidth": eb,
                "width": ab,
                "height": b,
                "lineColor": gb,
                "fillColor": rb
            }), tb.sparkline(tb.data("sparkline-line-val"), {
                "type": "line",
                "spotRadius": jb,
                "spotColor": j,
                "minSpotColor": mb,
                "maxSpotColor": nb,
                "highlightSpotColor": qb,
                "highlightLineColor": thisHighlightLineColor2,
                "valueSpots": db,
                "lineWidth": fb,
                "width": ab,
                "height": b,
                "lineColor": hb,
                "composite": !0,
                "fillColor": sb
            }), tb = null)
        })
    }
    $.fn.easyPieChart && $(".easy-pie-chart").each(function () {
        var a = $(this), b = a.css("color") || a.data("pie-color"), c = a.data("pie-track-color") || "rgba(0,0,0,0.04)", d = parseInt(a.data("pie-size")) || 25;
        a.easyPieChart({
            "barColor": b,
            "trackColor": c,
            "scaleColor": !1,
            "lineCap": "butt",
            "lineWidth": parseInt(d / 8.5),
            "animate": 1500,
            "rotate": -90,
            "size": d,
            "onStep": function (a, b, c) {
                $(this.el).find(".percent").text(Math.round(c))
            }
        }), a = null
    })
}

function loadScript(a, b) {
    if (jsArray[a])b && (debugState && root.root.console.log("This script was already loaded %c: " + a, debugStyle_warning), b()); else {
        jsArray[a] = !0;
        var c = document.getElementsByTagName("body")[0], d = document.createElement("script");
        d.type = "text/javascript", d.src = a, d.onload = b, c.appendChild(d)
    }
}

// 设置地址栏#后面的显示样式
function setLocationHash(href) {
    //if (href.indexOf('/admin') == 0) {
    //    window.location.hash = href.split('/admin').splice(1);
    //} else {
    //    window.location.hash = href;
    //}
    window.location.hash = href;

    var index = href.indexOf('?'),
            params = '';

    if (index > -1) {
        params = href.slice(index + 1), href = href.slice(0, index);
    }

    window.location.params = params, window.location.current = href;
}

// 初始化location.params, location.hash
function initLocation() {
    if (!window.location.hash) {
        var pathname = window.location.pathname;
        if ((pathname == '/admin') || (pathname == '/admin/')) {
            window.location.href = '/admin/#/admin/home';
        } else {
            window.location.href = '/admin/#' + window.location.pathname;
        }
    } else {
        var hash = window.location.hash;
        //alert(window.location.current)
        // fix bugs about endless "#/manage" url redirecting.
        if (hash == '#/admin' || hash == '#/admin/' || hash == '#/' || hash == '#') {
            hash = '#/admin/home';
        }
    }

    if (!window.location.current) {
        var href = hash.split('#').splice(1).join(),
                index = href.indexOf('?'),
                params = '';

        if (index > -1) {
            params = href.slice(index + 1), href = href.slice(0, index);
        }
        window.location.params = params, window.location.current = href;
    }
}

function loadURL(a, b) {
    $.ajax({
        "type": "GET", "url": a, "dataType": "html", "cache": !0, "beforeSend": function () {
            b.removeData().html("");
            b.html('<h1 class="ajax-loading-animation"><i class="fa fa-cog fa-spin"></i> 玩命加载中...</h1>');
            $("body").find("> *").filter(":not(" + ignore_key_elms + ")").empty().remove();
            drawBreadCrumb();
            $("html").animate({"scrollTop": 0}, "fast");
        }, "success": function (a) {
            // detect sessions/new page
            if (a.indexOf('id="login-form"') > -1) {
                window.location.href = "sessions/new";
            } else {
                b.css({"opacity": "0.0"}).html(a).delay(50).animate({"opacity": "1.0"}, 300), a = null, b = null
            }
            $(".editable").editable({
                ajaxOptions: {type: 'put'},
                params: function (params) {
                    params[$(this).data("field")] = params["value"]
                    return params;
                }, success: function (response, newValue) {
//                    alert("kkkkk")
                }, error: function (response, newValue) {
                    if (response.status) {
                        return true
                    }
                    ;
//                    return true;
                }
            })
            return false;
        }, "error": function (c, d, e) {
            b.html('<h4 class="ajax-loading-error"><i class="fa fa-warning txt-color-orangeDark"></i> 访问出错啦 <span class="txt-color-red">' + a + "</span>: " + c.status + ' <span style="text-transform: capitalize;">' + e + "</span></h4>")
        }, "async": !0
    })
}

function checkURL(redirect_url) {
    initLocation();
    var a = window.location.current;
    if (container = $("#content"), a) {
        var x;
        if (a.indexOf('/crm/profile/student') > -1) {
            x = '/crm/profile/students'
        } else {
            x = a
        }
        $("nav li.active").removeClass("active"), $('nav li:has(a[href="' + x + '"])').addClass("active");
        var d = $('nav a[href="' + x + '"]').attr("title");
        document.title = d || document.title;
        if (redirect_url) {
            var target = redirect_url;
        } else {
            var target = a;
            window.location.params && (target += '?' + window.location.params);
        }
        loadURL(target, container);
        $('#panel-wrapper').hide();
    } else {
        var e = $('nav > ul > li:first-child > a[href!="#"]');
        setLocationHash(e.attr("href"));
        checkURL();
    }
}

function drawBreadCrumb(a) {
    var b = $("nav li.active > a"), c = b.length, bread_crumb = $("#ribbon ol.breadcrumb");
    bread_crumb.empty(), b.each(function () {
        bread_crumb.append($("<li></li>").html($.trim($(this).clone().children(".badge").remove().end().text()))), --c || (document.title = bread_crumb.find("li:last-child").text())
    }), void 0 != a && $.each(a, function (a, b) {
        bread_crumb.append($("<li></li>").html(b)), document.title = bread_crumb.find("li:last-child").text()
    })
}

function toggleShortcut() {
    function a() {
        $("#shortcut").animate({
            "height": "hide"
        }, 300, "easeOutCirc"), $.root_.removeClass("shortcut-on")
    }

    function b() {
        $("#shortcut").animate({
            "height": "show"
        }, 200, "easeOutCirc"), $.root_.addClass("shortcut-on")
    }

    //$("#shortcut").is(":visible") ? a() : b(), $("#shortcut").find("a").click(function(b) {
    //	// alert($(this).attr("href"))
    //	b.preventDefault();
    //	url = $(this).attr("href")
    //	if((/^#/).test(url)) {
    //		window.location = $(this).attr("href")
    //	}else{
    //		loadURL(url, $("#content"));
    //	}
    //	setTimeout(a, 30)
    //	// window.open($(this).attr("href"))
    //}), $(document).mouseup(function(b) {
    //	$("#shortcut").is(b.target) || 0 !== $("#shortcut").has(b.target).length || a()
    //})
}


var jsArray = {};
var initApp = {
    leftNav: function () {
        $("nav ul").jarvismenu({
            "accordion": menu_accordion || !0,
            "speed": menu_speed || !0,
            "closedSign": '<em class="fa fa-plus-square-o"></em>',
            "openedSign": '<em class="fa fa-minus-square-o"></em>'
        })
    }
}

var ie = function () {
    for (var a, b = 3, c = document.createElement("div"), d = c.getElementsByTagName("i"); c.innerHTML = "<!--[if gt IE " + ++b + "]><i></i><![endif]-->", d[0];);
    return b > 4 ? b : a
}();

$.fn.extend({
    "jarvismenu": function (a) {
        var b = {
            "accordion": "true",
            "speed": 200,
            "closedSign": "[+]",
            "openedSign": "[-]"
        }, c = $.extend(b, a), d = $(this);
        d.find("li").each(function () {
            0 !== $(this).find("ul").size() && ($(this).find("a:first").append("<b class='collapse-sign'>" + c.closedSign + "</b>"), "#" == $(this).find("a:first").attr("href") && $(this).find("a:first").click(function () {
                return !1
            }))
        }), d.find("li.active").each(function () {
            $(this).parents("ul").slideDown(c.speed), $(this).parents("ul").parent("li").find("b:first").html(c.openedSign), $(this).parents("ul").parent("li").addClass("open")
        }), d.find("li a").click(function () {
            0 !== $(this).parent().find("ul").size() && (c.accordion && ($(this).parent().find("ul").is(":visible") || (parents = $(this).parent().parents("ul"), visible = d.find("ul:visible"), visible.each(function (a) {
                var b = !0;
                parents.each(function (c) {
                    return parents[c] == visible[a] ? (b = !1, !1) : void 0
                }), b && $(this).parent().find("ul") != visible[a] && $(visible[a]).slideUp(c.speed, function () {
                    $(this).parent("li").find("b:first").html(c.closedSign), $(this).parent("li").removeClass("open")
                })
            }))), $(this).parent().find("ul:first").is(":visible") && !$(this).parent().find("ul:first").hasClass("active") ? $(this).parent().find("ul:first").slideUp(c.speed, function () {
                $(this).parent("li").removeClass("open"), $(this).parent("li").find("b:first").delay(c.speed).html(c.closedSign)
            }) : $(this).parent().find("ul:first").slideDown(c.speed, function () {
                $(this).parent("li").addClass("open"), $(this).parent("li").find("b:first").delay(c.speed).html(c.openedSign)
            }))
        })
    }
});

($("nav").length && checkURL(), $(document).on("click", 'nav a[href!="#"]', function (a) {
    a.preventDefault();
    var b = $(a.currentTarget);
    b.parent().hasClass("active");
    b.attr("target");
    setLocationHash(b.attr("href"))
    checkURL();
}), $(document).on("click", 'nav a[target="_blank"]', function (a) {
    a.preventDefault();
    var b = $(a.currentTarget);
    window.open(b.attr("href"))
}), $(document).on("click", 'nav a[target="_top"]', function (a) {
    a.preventDefault();
    var b = $(a.currentTarget);
    window.location = b.attr("href")
}), $(document).on("click", 'nav a[href="#"]', function (a) {
    a.preventDefault()
}));

function initAjaxTabs() {
    $(".ajax-tabs a").on("click", function (e) {
        e.preventDefault();
        $(this).parent().addClass("active").siblings().removeClass("active")
        var href = $(this).attr('href');
        if (/format=(csv|xls|tsv)/i.test(href)) {
            window.open(href);
        } else {
            //(href != '#') && (setLocationHash(href) || $('#content').load(href));
            setLocationHash(href)
            $('#content').load(href)
        }
        return false;
    })
}

jQuery(document).ready(function () {
    initApp.leftNav();
    checkURL();

    $("#activity").click(function (a) {
        var b = $(this);
        b.find(".badge").hasClass("bg-color-red") && (b.find(".badge").removeClassPrefix("bg-color-"), b.find(".badge").text("0")), b.next('.ajax-dropdown').is(":visible") ? (b.next('.ajax-dropdown').fadeOut(150), b.removeClass("active")) : (b.next('.ajax-dropdown').fadeIn(150), b.addClass("active"));
        var c = b.next('.ajax-dropdown').find(".btn-group > .active > input").attr("id");
        b = null, c = null, a.preventDefault()
    });

    $('[data-action="toggleShortcut"]').click(function (b) {
        toggleShortcut(), b.preventDefault()
    })

    var xx;
    if (window.location.current.indexOf('/crm/profile/student') > -1) {
        xx = '/crm/profile/students'
    } else {
        xx = window.location.current
    }
    $('nav li:has(a[href="' + xx + '"]):lt(-1)').find('a:first').trigger('click');

    $('body').delegate('a[data-action="toggleMenu"]', 'click', function (e) {
        e.preventDefault();
        $('html').toggleClass("hidden-menu-mobile-lock");
        $('body').toggleClass("hidden-menu");
        $('body').removeClass("minified");
        return false;
    }).delegate(".batch_delete,.batch_action", "click", function (e) {
        var container = $(this).parents(".jarviswidget");
        var selected_ids = $(".table tbody .check input:checked", container).map(function () {
            return $(this).attr("id")
        }).get();
        if (selected_ids.length == 0) {
            e.preventDefault();
            e.stopImmediatePropagation();
            alert("请选择数据项");
        } else {
            $(this).attr("href", $(this).data("href") + "?ids=" + selected_ids.join(","));
            //$(this).attr("data-target", "rightPanel");
            //$(this).trigger("click");
            e.preventDefault();
            e.stopPropagation();
        }
    }).delegate('.dd-item a, a.redirect-back, .actions a:not([data-toggle="modal"],[data-target="rightPanel"],[data-target="popover"],[data-method="put"],[data-method="delete"], [data-trigger="file-download"])', 'click', function (e) {
        e.preventDefault();
        var href = $(this).attr('href');
        var redirect_url = $(this).attr('data-redirect-url');
        if ($(this).hasClass('once-click')) {
            $(this).attr('disabled', 'disabled');
        }
        if (redirect_url) {
            setLocationHash(redirect_url) || $('#content').load(redirect_url);
        } else {
            (href != '#') && (setLocationHash(href) || $('#content').load(href));
        }
        return false;
    }).delegate('[data-remote="true"]', 'click', function (e) {
        e.preventDefault();
        var href = $(this).attr('href');
        if ($(this).hasClass('once-click')) {
            $(this).attr('disabled', 'disabled');
        }
        (href != '#') && (setLocationHash(href) || $('#content').load(href));
        return false;
    }).delegate('a[data-method="delete"], a[data-method="put"], a[data-method="post"]', 'click.rails', function (e) {
        e.preventDefault();
        var $this = $(this);
        if ($(this).hasClass('once-click')) {
            $(this).attr('disabled', 'disabled');
        }
        if ($(this).hasClass('should_wait')) {
            $("#right-panel").html($("#wait-popup").html());
            if ($("#panel-wrapper").is(':hidden')) {
                $("#panel-wrapper").show();
            }
        }
        $.rails.allowAction($this) && $.rails.handleRemote($this);
        return false;
    }).delegate('a[data-method="delete"], a[data-method="put"], a[data-method="post"]', 'ajax:complete', function (event, xhr) {
        var info = decodeURIComponent(escape(xhr.getResponseHeader('info')));
        var location = xhr.getResponseHeader('Location');
        if (location) {
            location = "/admin" + location.split("admin").splice(1);
        }
        var this_link = $(this);
        var redirect_url = $(this).attr('data-redirect-url') || location;
        var make_as_read = $(this).hasClass('make_as_read');
        var delete_notif = $(this).hasClass('delete_notif');
        var delete_comment = $(this).hasClass('delete-comment');
        if (xhr.status >= 400) {
            // alert('操作失败！');
            $("#right-panel").html($("#fail-popup").html());
            if ($("#panel-wrapper").is(':hidden')) {
                $("#panel-wrapper").show();
            }
        }
        else {
            // alert('操作成功！');
            var curr_size = parseInt(this_link.parents('div.ajax-dropdown').find('span.notifications_count').html());
            var curr_total_size = parseInt(this_link.parents('div#logo-group').find('#activity b.badge').html());
            if (make_as_read) {
                if (this_link.hasClass('frontpage_make_as_read')) {
                    this_link.parents('div.notif_title').addClass('read');
                } else {
                    this_link.parents('div.ajax-dropdown').find('span.notifications_count').html(curr_size - 1);
                    this_link.parents('div#logo-group').find('#activity b.badge').html(curr_total_size - 1);
                    this_link.parents('div.notif-wrapper').find('.notif_title').addClass('read');
                    this_link.removeClass("make_as_read").removeAttr("data-method").removeAttr("href")
                }
            } else if (delete_notif) {
                if (this_link.hasClass('frontpage_delete_notif')) {
                    this_link.parents('tr').remove();
                } else {
                    if (!this_link.parents('div.notif-wrapper').find('.notif_title').hasClass('read')) {
                        this_link.parents('div.ajax-dropdown').find('span.notifications_count').html(curr_size - 1);
                        this_link.parents('div#logo-group').find('#activity b.badge').html(curr_total_size - 1);
                    }
                    this_link.parents('div.notif-wrapper').remove();
                }
            } else if (delete_comment) {
                this_link.parents('fieldset.x-comment-fieldset').remove();
                return false
            } else {
                $("#right-panel").html($("#success-popup").html());
                if ($("#panel-wrapper").is(':hidden')) {
                    $("#panel-wrapper").show();
                }
                setTimeout(function () {
                    $('.modal').modal('hide').removeData('bs.modal');
                    if (redirect_url) {
                        setLocationHash(redirect_url);
                    }
                    checkURL(redirect_url);
                }, 2000);
            }
        }
    }).delegate('.modal', 'hidden.bs.modal', function () {
        $(this).removeData('bs.modal')
    }).delegate('.modal form, #togglingForm', 'submit', function (e) {
        e.preventDefault();
        $form = $(this);
        $.rails.allowAction($form) && $.rails.handleRemote($form);
        $form.find("input[type='submit']").attr('disabled', 'disabled')
        return false;
    }).delegate('.modal form, #togglingForm', 'ajax:complete', function (event, xhr) {
        var info = decodeURIComponent(escape(xhr.getResponseHeader('info')));
        var location = decodeURIComponent(escape(xhr.getResponseHeader('Location')));
        var redirect_url = $(this).attr('data-redirect-url');
        var modalManager = $("body").data("modalmanager");
        var openModels = modalManager.getOpenModals()
        var currentModal = openModels.pop();
        var prev_Modal = openModels[openModels.length - 1];
        if (xhr.status >= 400) {
            // alert('操作失败！');
            currentModal.$element.html($("#fail-popup").html());
//            if ($("#panel-wrapper").is(':hidden')) {
//                $("#panel-wrapper").show();
//            }
        }
        else {
            // alert('操作成功！');
            currentModal.$element.html($("#success-popup").html());
//            if ($("#panel-wrapper").is(':hidden')) {
//                $("#panel-wrapper").show();
//            }
            console.log(modalManager.getOpenModals())
            if (modalManager.getOpenModals().length > 1) {
                currentModal.hide()
                prev_Modal.$element
//                prev_Modal.replace()
            } else {
                setTimeout(function () {
                    $('.modal').modal('hide').removeData('bs.modal');
                    if (redirect_url) {
                        setLocationHash(redirect_url);
                    }
                    checkURL(redirect_url);
                }, 2000);
            }

        }
    }).delegate('#search_form', 'submit', function (e) {
        e.preventDefault();
        $form = $(this);
        var href = $form.attr('action') + '?' + $form.serialize();
        if (/format=(csv|xls|tsv)/i.test(href)) {
            window.open(href);
        } else {
            (href != '#') && (setLocationHash(href) || $('#content').load(href));
        }
        return false;
    }).delegate('a[data-target="rightPanel"]', 'click', function (e) {
        e.preventDefault();
        var modalManager = $("body").data("modalmanager");
        var modals_count = modalManager == undefined ? 0 : modalManager.getOpenModals().length;
//        var modal_ids=modals.map(function(){return $(this).attr("id").replace(/right-panel-(\d+)/,"")})
        if (modals_count == 0) {
            var $modal = $("#right-panel")
        } else if (modals_count < 2) {
            var $modal = $("#right-panel-" + modals_count);
        } else {
            var $modal = $("#right-panel-2");
        }
        $('body').modalmanager('loading');
        var href = $(this).attr('href');
        if (href.match(/^#/)) {
            $modal.modal('loading');
            setTimeout(function () {
                $modal.html($(href).show()).modal("show")
            }, 1000);
        } else if (href.match(/\.jpg|\.gif|\.jpg|\.png/)) {
            $modal.html("<img src='"+href+"' style='max-width: 700px'/>");
            $modal.modal();
        } else {
            setTimeout(function () {
                $modal.load(href, '', function () {
                    $modal.modal();
                });
            }, 1000);
        }
//        (href != '#') && $('#right-panel').html('<div class="ajax-loading" style="text-align: center; margin-top: 40px;"><img src="<%=asset_path("admin/icon/ajax-loader.gif")%>" width="50" height="50" /></div>').load(href).parent("#panel-wrapper").show();
        return false;
    }).delegate('[data-dismiss="rightPanel"]', 'click', function (e) {
        e.preventDefault();
        if ($("#panel-wrapper").is(':hidden')) {
            var redirect_url = $(this).parents('#content').find('form').attr('data-redirect-url');
            if (redirect_url) {
                setLocationHash(redirect_url);
                checkURL(redirect_url);
            }
        } else {
            $('#panel-wrapper').hide();
        }
        return false;
    }).delegate('[data-target="popover"]', 'click', function (e) {
        e.preventDefault();
        var $this = $(this);
        $.get($this.attr('href'), function (html) {
            $this.popover({placement: 'bottom', content: html, html: true}).popover('show');
        });
    }).delegate('label.switcher-trigger', 'click', function (e) {
        e.preventDefault();
        var id = $(this).find('input').attr('data-id');
        $('.ajax-dropdown .ajax-notifications #' + id).show().siblings('div').hide();
    });

    $(document).mouseup(function (a) {
        if (!$('.ajax-dropdown').is(a.target) && $('.ajax-dropdown').has(a.target).length == 0) {
            $('.ajax-dropdown').fadeOut(150);
            $('.ajax-dropdown').prev().removeClass('active');
        }

        if ($('#panel-wrapper').is(a.target)) {
            if (!$('.datetimepicker').is(a.target) && $('.datetimepicker').has(a.target).length == 0) {
                $('#panel-wrapper').hide();
            }
        }

        if (!$('.popover').is(a.target) && $('.popover').has(a.target).length == 0) {
            $('.popover').popover("hide")
        }
    });

    $(document).on("keydown", function (e) {
        if (e.which == 13) {
            if (!$("#panel-wrapper").is(':hidden') && !$(e.target).is("textarea")) {
                e.stopPropagation();
                e.preventDefault();
                return false;
            }
        }
    })
});
